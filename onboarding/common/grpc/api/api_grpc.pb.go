// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GuessNumsClient is the client API for GuessNums service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuessNumsClient interface {
	GuessNum(ctx context.Context, opts ...grpc.CallOption) (GuessNums_GuessNumClient, error)
}

type guessNumsClient struct {
	cc grpc.ClientConnInterface
}

func NewGuessNumsClient(cc grpc.ClientConnInterface) GuessNumsClient {
	return &guessNumsClient{cc}
}

func (c *guessNumsClient) GuessNum(ctx context.Context, opts ...grpc.CallOption) (GuessNums_GuessNumClient, error) {
	stream, err := c.cc.NewStream(ctx, &GuessNums_ServiceDesc.Streams[0], "/apipb.guessNums/guessNum", opts...)
	if err != nil {
		return nil, err
	}
	x := &guessNumsGuessNumClient{stream}
	return x, nil
}

type GuessNums_GuessNumClient interface {
	Send(*NumGuessRequest) error
	Recv() (*NumGuessResponse, error)
	grpc.ClientStream
}

type guessNumsGuessNumClient struct {
	grpc.ClientStream
}

func (x *guessNumsGuessNumClient) Send(m *NumGuessRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *guessNumsGuessNumClient) Recv() (*NumGuessResponse, error) {
	m := new(NumGuessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GuessNumsServer is the server API for GuessNums service.
// All implementations must embed UnimplementedGuessNumsServer
// for forward compatibility
type GuessNumsServer interface {
	GuessNum(GuessNums_GuessNumServer) error
	mustEmbedUnimplementedGuessNumsServer()
}

// UnimplementedGuessNumsServer must be embedded to have forward compatible implementations.
type UnimplementedGuessNumsServer struct {
}

func (UnimplementedGuessNumsServer) GuessNum(GuessNums_GuessNumServer) error {
	return status.Errorf(codes.Unimplemented, "method GuessNum not implemented")
}
func (UnimplementedGuessNumsServer) mustEmbedUnimplementedGuessNumsServer() {}

// UnsafeGuessNumsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuessNumsServer will
// result in compilation errors.
type UnsafeGuessNumsServer interface {
	mustEmbedUnimplementedGuessNumsServer()
}

func RegisterGuessNumsServer(s grpc.ServiceRegistrar, srv GuessNumsServer) {
	s.RegisterService(&GuessNums_ServiceDesc, srv)
}

func _GuessNums_GuessNum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GuessNumsServer).GuessNum(&guessNumsGuessNumServer{stream})
}

type GuessNums_GuessNumServer interface {
	Send(*NumGuessResponse) error
	Recv() (*NumGuessRequest, error)
	grpc.ServerStream
}

type guessNumsGuessNumServer struct {
	grpc.ServerStream
}

func (x *guessNumsGuessNumServer) Send(m *NumGuessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *guessNumsGuessNumServer) Recv() (*NumGuessRequest, error) {
	m := new(NumGuessRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GuessNums_ServiceDesc is the grpc.ServiceDesc for GuessNums service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuessNums_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.guessNums",
	HandlerType: (*GuessNumsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "guessNum",
			Handler:       _GuessNums_GuessNum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
