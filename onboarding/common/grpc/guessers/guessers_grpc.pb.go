// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package guessers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GuessersClient is the client API for Guessers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuessersClient interface {
	AddGuesser(ctx context.Context, in *AddGuesserRequest, opts ...grpc.CallOption) (*AddGuesserResponse, error)
	RemoveGuesser(ctx context.Context, in *RemoveGuesserRequest, opts ...grpc.CallOption) (*RemoveGuesserResponse, error)
	QueryGuesser(ctx context.Context, in *QueryGuesserRequest, opts ...grpc.CallOption) (*QueryGuesserResponse, error)
}

type guessersClient struct {
	cc grpc.ClientConnInterface
}

func NewGuessersClient(cc grpc.ClientConnInterface) GuessersClient {
	return &guessersClient{cc}
}

func (c *guessersClient) AddGuesser(ctx context.Context, in *AddGuesserRequest, opts ...grpc.CallOption) (*AddGuesserResponse, error) {
	out := new(AddGuesserResponse)
	err := c.cc.Invoke(ctx, "/guesserspb.guessers/addGuesser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guessersClient) RemoveGuesser(ctx context.Context, in *RemoveGuesserRequest, opts ...grpc.CallOption) (*RemoveGuesserResponse, error) {
	out := new(RemoveGuesserResponse)
	err := c.cc.Invoke(ctx, "/guesserspb.guessers/removeGuesser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guessersClient) QueryGuesser(ctx context.Context, in *QueryGuesserRequest, opts ...grpc.CallOption) (*QueryGuesserResponse, error) {
	out := new(QueryGuesserResponse)
	err := c.cc.Invoke(ctx, "/guesserspb.guessers/queryGuesser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuessersServer is the server API for Guessers service.
// All implementations must embed UnimplementedGuessersServer
// for forward compatibility
type GuessersServer interface {
	AddGuesser(context.Context, *AddGuesserRequest) (*AddGuesserResponse, error)
	RemoveGuesser(context.Context, *RemoveGuesserRequest) (*RemoveGuesserResponse, error)
	QueryGuesser(context.Context, *QueryGuesserRequest) (*QueryGuesserResponse, error)
	mustEmbedUnimplementedGuessersServer()
}

// UnimplementedGuessersServer must be embedded to have forward compatible implementations.
type UnimplementedGuessersServer struct {
}

func (UnimplementedGuessersServer) AddGuesser(context.Context, *AddGuesserRequest) (*AddGuesserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGuesser not implemented")
}
func (UnimplementedGuessersServer) RemoveGuesser(context.Context, *RemoveGuesserRequest) (*RemoveGuesserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGuesser not implemented")
}
func (UnimplementedGuessersServer) QueryGuesser(context.Context, *QueryGuesserRequest) (*QueryGuesserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGuesser not implemented")
}
func (UnimplementedGuessersServer) mustEmbedUnimplementedGuessersServer() {}

// UnsafeGuessersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuessersServer will
// result in compilation errors.
type UnsafeGuessersServer interface {
	mustEmbedUnimplementedGuessersServer()
}

func RegisterGuessersServer(s grpc.ServiceRegistrar, srv GuessersServer) {
	s.RegisterService(&Guessers_ServiceDesc, srv)
}

func _Guessers_AddGuesser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGuesserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuessersServer).AddGuesser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guesserspb.guessers/addGuesser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuessersServer).AddGuesser(ctx, req.(*AddGuesserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guessers_RemoveGuesser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGuesserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuessersServer).RemoveGuesser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guesserspb.guessers/removeGuesser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuessersServer).RemoveGuesser(ctx, req.(*RemoveGuesserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guessers_QueryGuesser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGuesserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuessersServer).QueryGuesser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guesserspb.guessers/queryGuesser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuessersServer).QueryGuesser(ctx, req.(*QueryGuesserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Guessers_ServiceDesc is the grpc.ServiceDesc for Guessers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Guessers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "guesserspb.guessers",
	HandlerType: (*GuessersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addGuesser",
			Handler:    _Guessers_AddGuesser_Handler,
		},
		{
			MethodName: "removeGuesser",
			Handler:    _Guessers_RemoveGuesser_Handler,
		},
		{
			MethodName: "queryGuesser",
			Handler:    _Guessers_QueryGuesser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guessers.proto",
}
